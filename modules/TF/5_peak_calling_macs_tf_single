
rule macs_callPeaks_inputs_narrow:
	input:
		control = "bed_files/pooled_controls.bed.gz",
		ip = "bed_files/{sample}.bed.gz",
		cc_scores = "xcor/{sample}.filt.nodup.sample.SE.tagAlign.cc.qc"
	output:
		narrowPeak = temp("peaks/{sample}_peaks.narrowPeak"),
		narrowPeak_compressed = "peaks/{sample}_peaks.narrowPeak.gz",
		treat = temp("peaks/{sample}_treat_pileup.bdg"),
		control_lambda = temp("peaks/{sample}_control_lambda.bdg")
	threads:1
	params:
		prefix="{sample}"
	log: "logs/5_peakCalling"
	message: "Calling Peaks using MACS2"
	shell:
		"""
		fraglen=`cat {input.cc_scores} | cut -f3`

		{config[macs2]} callpeak \
                  -t {input.ip} -c {input.control}\
                  -f BED -n peaks/{wildcards.sample}\
                  -g {config[macs_g]} -p 1e-2 --nomodel --shift 0 --extsize $fraglen \
                  --keep-dup all -B --SPMR

		sort -k 8gr,8gr {output.narrowPeak} |\
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ;i print $0}}'| \
		gzip -nc > {output.narrowPeak_compressed}

		rm -f peaks/{wildcards.sample}_peaks.xls peaks/{wildcards.sample}_summits.bed

		"""


rule macs_callPeaks_inputs_broad:
	input:
		control = "bed_files/pooled_controls.bed.gz",
		ip = "bed_files/{sample}.bed.gz",
		cc_scores = "xcor/{sample}.filt.nodup.sample.SE.tagAlign.cc.qc"
	output:
		broadPeak = temp("peaks/{sample}_peaks.broadPeak"),
		broadPeak_compressed = "peaks/{sample}_peaks.broadPeak.gz",
	threads:1
	params:
		prefix="{sample}"
	log: "logs/5_peakCalling"
	message: "Calling Peaks using MACS2"
	shell:
		"""
		fraglen=`cat {input.cc_scores} | cut -f3`

		{config[macs2]} callpeak \
                  -t {input.ip} -c {input.control}\
                  -f BED -n peaks/{wildcards.sample}\
                  -g {config[macs_g]} -p 1e-2 --broad --nomodel --shift 0 --extsize $fraglen \
                  --keep-dup all

		sort -k 8gr,8gr {output.broadPeak} | \
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ;i print $0}}'| \
		gzip -nc > {output.broadPeak_compressed}

		sort -k 14gr,14gr {output.broadPeak} | \
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ;i print $0}}'| \
		gzip -nc > {output.gappedPeak_compressed}


		rm -f peaks/{wildcards.sample}_peaks.xls peaks/{wildcards.sample}_summits.bed

		"""


rule macs_signal_tracks:
	input:
		control = "bed_files/pooled_controls.bed.gz",
		ip = "bed_files/{sample}.bed.gz",
		treat = "peaks/{sample}_treat_pileup.bdg",
		control_lambda = "peaks/{sample}_control_lambda.bdg"
	output:
		pvalue_signal = "peaks/signals/{sample}.pvalue_signal.bw",
		fe_bdg = temp("peaks/signals/{sample}_FE.bdg"),
		fc_signal_bdg = temp("peaks/signals/{sample}.fc.signal.bedgraph"),
		fc_signal = "peaks/signals/{sample}.fc_signal.bw",
		ppois = temp("peaks/signals/{sample}_ppois.bdg"),
		pval_bdg = temp("peaks/signals/{sample}.pval.signal.bedgraph"),
		pval = "peaks/signals/{sample}.pval.signal.bw"
	threads:1
	params:
		prefix="{sample}"
	log: "logs/5_peakCalling"
	message: "Calling Peaks using MACS2"
	shell:
		"""
		{config[macs2]} bdgcmp  \
                 -t {input.treat} -c {input.control_lambda} \
                 --outdir peaks/signals -o {output.fe_bdg} -m FE

		bedtools slop -i {output.fe_bdg} -g {config[chrom]} -b 0 |\
		awk '{{ if($3!=-1) print $0}}' | \
                {config[path]}/bedClip stdin {config[chrom]} {output.fc_signal_bdg}


		{config[path]}/bedGraphToBigWig {output.fc_signal_bdg} {config[chrom]} {output.fc_signal}


		chipReads=$(zcat {input.ip} | wc -l | awk '{{printf "%f", $1/1000000}}');
		controlReads=$(zcat {control.ip} | wc -l | awk '{{printf "%f", $1/1000000}}');

		sval=$(echo "${chipReads} ${controlReads}" | awk '$1>$2{{printf "%f",$2}} $1<=$2{{printf "%f",$1}}');

		macs2 bdgcmp -t {input.treat} -c {input.control_lambda} --outdir peaks/signals -o {output.ppois} -m ppois -S ${sval}

		slopBed -i {output.ppois} -g {config[chrom]} -b 0 | \
		awk '{{if ($3 != -1) print $0}}' |  \
		bedClip stdin {config[chrom]} {output.pval_bdg}

		bedGraphToBigWig {output.pval_bdg} {config[chrom]} {output.pval}

		"""


rule macs_callPeaks_psr_narrow:
			input:
				control = "bed_files/pooled_controls.bed.gz",
				ip_psr1 = "bed_files/psr_{sample}.00.bed.gz",
				ip_psr2 = "bed_files/psr_{sample}.01.bed.gz",
				cc_scores = "xcor/{sample}.filt.nodup.sample.SE.tagAlign.cc.qc"
			output:
				narrowPeak_psr1 = "peaks/psr_{sample}.00_peaks.narrowPeak",
				narrowPeak_psr2 = "peaks/psr_{sample}.01_peaks.narrowPeak",
				treat = temp("peaks/{sample}_treat_pileup.bdg"),
				control_lambda = temp("peaks/{sample}_control_lambda.bdg")
			threads:1
			params:
				prefix="{sample}"
			log: "logs/5_peakCalling"
			message: "Calling Peaks using MACS2"
			shell:
				"""
				fraglen=`cat {input.cc_scores} | cut -f3`

				{config[macs2]} callpeak \
		                  -t {input.ip} -c {input.control}\
		                  -f BED -n peaks/{wildcards.sample}\
		                  -g {config[macs_g]} -p 1e-2 --nomodel --shift 0 --extsize $fraglen \
		                  --keep-dup all -B --SPMR

				sort -k 8gr,8gr {output.narrowPeak} |\
				awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ;i print $0}}'| \
				gzip -nc > {output.narrowPeak_compressed}

				rm -f peaks/{wildcards.sample}_peaks.xls peaks/{wildcards.sample}_summits.bed

				"""

rule macs_callPeaks_psr_broad:
			input:
				control = "bed_files/pooled_controls.bed.gz",
				ip = "bed_files/{sample}.bed.gz",
				ip_psr1 = "bed_files/psr_{sample}.00.bed.gz",
				ip_psr2 = "bed_files/psr_{sample}.01.bed.gz",
				cc_scores = "xcor/{sample}.filt.nodup.sample.SE.tagAlign.cc.qc"
			output:
				broadPeak_psr1 = "peaks/psr_{sample}.00_peaks.broadPeak",
				broadPeak_psr2 = "peaks/psr_{sample}.01_peaks.broadPeak",
				gappedPeak_psr1 = "peaks/psr_{sample}.00_peaks.gappedPeak",
				gappedPeak_psr2 = "peaks/psr_{sample}.01_peaks.gappedPeak"
			threads:1
			params:
				prefix="{sample}"
			log: "logs/5_peakCalling"
			message: "Calling Peaks using MACS2"
			shell:
				"""
				fraglen=`cat {input.cc_scores} | cut -f3`

				{config[macs2]} callpeak \
		                  -t {input.ip} -c {input.control}\
		                  -f BED -n peaks/{wildcards.sample}\
		                  -g {config[macs_g]} -p 1e-2 --broad --nomodel --shift 0 --extsize $fraglen \
		                  --keep-dup all

				sort -k 8gr,8gr {output.broadPeak} | \
				awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ;i print $0}}'| \
				gzip -nc > {output.broadPeak_compressed}

				sort -k 14gr,14gr {output.broadPeak} | \
				awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ;i print $0}}'| \
				gzip -nc > {output.gappedPeak_compressed}


				rm -f peaks/{wildcards.sample}_peaks.xls peaks/{wildcards.sample}_summits.bed

				"""




		###Qui cominciano le pseudorep
		shell("""
		fraglen=`cat {input.cc_scores} | cut -f3`
		{config[macs2]} callpeak \
                  -t {input.ip_psr1} -c {input.control}\
                  -f BED -n peaks/psr_{wildcards.sample}.00\
                  -g {config[macs_g]} -p 1e-2 --nomodel --shift 0 --extsize $fraglen \
                  --keep-dup all -B --SPMR
		""")

		# Rescale Col5 scores to range 10-1000 to conform \
		# to narrowPeak.as format (score must be <1000)
		new_min=10
		new_max=1000
		scores_col=5
		sorted_fn = output.narrowPeak_psr1+"-sorted"
		rescaled_fn = output.narrowPeak_psr1+"-rescaled"

		shell("""
		sort -k 5gr,5gr {output.narrowPeak_psr1}|\
		awk 'BEGIN{{FS="\t";OFS="\t"}}{{if (NF != 0) print $0}}' > {sorted_fn}
		max=`head -n 1 {sorted_fn} | cut -f 5`
		min=`tail -n 1 {sorted_fn} | cut -f 5`
		cat {sorted_fn}|\
		awk -v min=$min -v max=$max 'BEGIN{{OFS="\t"}}{{n=$5;a=min;b=max;x=10;y=1000}}\
		{{$5=int(((n-a)*(y-x)/(b-a))+x) ; print $0}}' > {rescaled_fn}
		""")

		shell("""
		sort -k 8gr,8gr {rescaled_fn} |\
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ; \
               	print $0}}' >  {output.narrowPeak_psr1}

		rm -f peaks/psr_{wildcards.sample}.00_peaks.xls peaks/psr_{wildcards.sample}.00_peaks.bed peaks/psr_{wildcards.sample}.00_summits.bed
		rm -f {rescaled_fn} {sorted_fn}

		fraglen=`cat {input.cc_scores} | cut -f3`
		{config[macs2]} callpeak \
                  -t {input.ip_psr2} -c {input.control}\
                  -f BED -n peaks/psr_{wildcards.sample}.01\
                  -g {config[macs_g]} -p 1e-2 --nomodel --shift 0 --extsize $fraglen \
                  --keep-dup all -B --SPMR
		""")

		# Rescale Col5 scores to range 10-1000 to conform \
		# to narrowPeak.as format (score must be <1000)
		new_min=10
		new_max=1000
		scores_col=5
		sorted_fn = output.narrowPeak_psr2+"-sorted"
		rescaled_fn = output.narrowPeak_psr2+"-rescaled"

		shell("""
		sort -k 5gr,5gr {output.narrowPeak_psr2}|\
		awk 'BEGIN{{FS="\t";OFS="\t"}}{{if (NF != 0) print $0}}' > {sorted_fn}
		max=`head -n 1 {sorted_fn} | cut -f 5`
		min=`tail -n 1 {sorted_fn} | cut -f 5`
		cat {sorted_fn}|\
		awk -v min=$min -v max=$max 'BEGIN{{OFS="\t"}}{{n=$5;a=min;b=max;x=10;y=1000}}\
		{{$5=int(((n-a)*(y-x)/(b-a))+x) ; print $0}}' > {rescaled_fn}
		""")

		shell("""
		sort -k 8gr,8gr {rescaled_fn} |\
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ; \
               	print $0}}' >  {output.narrowPeak_psr2}

		rm -f peaks/psr_{wildcards.sample}.01_peaks.xls peaks/psr_{wildcards.sample}.01_peaks.bed peaks/psr_{wildcards.sample}.01_summits.bed
		rm -f {rescaled_fn} {sorted_fn}
		rm -f peaks/psr_{wildcards.sample}.00_control_lamda.bdg peaks/psr_{wildcards.sample}.00.narrowPeak-rescaled peaks/psr_{wildcards.sample}.00.narrowPeak-sorted
		rm -f peaks/psr_{wildcards.sample}.00_treat_pileup.bdg
		rm -f peaks/psr_{wildcards.sample}.01_control_lamda.bdg peaks/psr_{wildcards.sample}.01.narrowPeak-rescaled peaks/psr_{wildcards.sample}.01.narrowPeak-sorted
		rm -f peaks/psr_{wildcards.sample}.01_treat_pileup.bdg
		""")


		#Calling gappedPeaks psr1
		shell("""
		fraglen=`cat {input.cc_scores} | cut -f3`
		{config[macs2]} callpeak \
                  -t {input.ip_psr1} -c {input.control}\
                  -f BED -n peaks/psr_{wildcards.sample}.00\
                  -g {config[macs_g]} -p 1e-2 --broad --nomodel --shift 0 --extsize $fraglen \
                  --keep-dup all """)

		# Rescale Col5 scores to range 10-1000 to conform \
		# to gappedPeak.as format (score must be <1000)
		new_min=10
		new_max=1000
		scores_col=5
		sorted_fn = output.broadPeak_psr1+"-sorted"
		rescaled_fn = output.broadPeak_psr1+"-rescaled"

		shell("""
		sort -k 5gr,5gr {output.broadPeak_psr1}|\
		awk 'BEGIN{{FS="\t";OFS="\t"}}{{if (NF != 0) print $0}}' > {sorted_fn}
		max=`head -n 1 {sorted_fn} | cut -f 5`
		min=`tail -n 1 {sorted_fn} | cut -f 5`
		cat {sorted_fn}|\
		awk -v min=$min -v max=$max 'BEGIN{{OFS="\t"}}{{n=$5;a=min;b=max;x=10;y=1000}}\
		{{$5=int(((n-a)*(y-x)/(b-a))+x) ; print $0}}' > {rescaled_fn}
		""")

		shell("""
		sort -k 8gr,8gr {rescaled_fn} |\
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ; \
               	print $0}}' > {output.broadPeak_psr1}

		rm -f peaks/pst_{wildcards.sample}.00_peaks.xls peaks/psr_{wildcards.sample}.00_peaks.bed peaks/psr_{wildcards.sample}.00_summits.bed

		rm -f {rescaled_fn} {sorted_fn}
		""")

		# Rescale Col5 scores to range 10-1000 to conform \
		# to gappedPeak.as format (score must be <1000)
		new_min=10
		new_max=1000
		scores_col=5
		sorted_fn = output.gappedPeak_psr1+"-sorted"
		rescaled_fn = output.gappedPeak_psr1+"-rescaled"

		shell("""
		sort -k 5gr,5gr {output.gappedPeak_psr1}|\
		awk 'BEGIN{{FS="\t";OFS="\t"}}{{if (NF != 0) print $0}}' > {sorted_fn}
		max=`head -n 1 {sorted_fn} | cut -f 5`
		min=`tail -n 1 {sorted_fn} | cut -f 5`
		cat {sorted_fn}|\
		awk -v min=$min -v max=$max 'BEGIN{{OFS="\t"}}{{n=$5;a=min;b=max;x=10;y=1000}}\
		{{$5=int(((n-a)*(y-x)/(b-a))+x) ; print $0}}' > {rescaled_fn}
		""")

		shell("""
		sort -k 14gr,14gr {rescaled_fn} |\
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ; \
               	print $0}}' > {output.gappedPeak_psr1}

		rm -f peaks/psr_{wildcards.sample}.00_peaks.xls peaks/psr_{wildcards.sample}.00_peaks.bed peaks/psr_{wildcards.sample}.00_summits.bed

		rm -f {rescaled_fn} {sorted_fn}
		""")
		#Calling gappedPeaks psr2
		shell("""
		fraglen=`cat {input.cc_scores} | cut -f3`
		{config[macs2]} callpeak \
                  -t {input.ip_psr2} -c {input.control}\
                  -f BED -n peaks/psr_{wildcards.sample}.01\
                  -g {config[macs_g]} -p 1e-2 --broad --nomodel --shift 0 --extsize $fraglen \
                  --keep-dup all """)

		# Rescale Col5 scores to range 10-1000 to conform \
		# to gappedPeak.as format (score must be <1000)
		new_min=10
		new_max=1000
		scores_col=5
		sorted_fn = output.broadPeak_psr2+"-sorted"
		rescaled_fn = output.broadPeak_psr2+"-rescaled"

		shell("""
		sort -k 5gr,5gr {output.broadPeak_psr2}|\
		awk 'BEGIN{{FS="\t";OFS="\t"}}{{if (NF != 0) print $0}}' > {sorted_fn}
		max=`head -n 1 {sorted_fn} | cut -f 5`
		min=`tail -n 1 {sorted_fn} | cut -f 5`
		cat {sorted_fn}|\
		awk -v min=$min -v max=$max 'BEGIN{{OFS="\t"}}{{n=$5;a=min;b=max;x=10;y=1000}}\
		{{$5=int(((n-a)*(y-x)/(b-a))+x) ; print $0}}' > {rescaled_fn}
		""")

		shell("""
		sort -k 8gr,8gr {rescaled_fn} |\
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ; \
               	print $0}}' > {output.broadPeak_psr2}

		rm -f peaks/psr_{wildcards.sample}.01_peaks.xls peaks/psr_{wildcards.sample}.01_peaks.bed peaks/psr_{wildcards.sample}.01_summits.bed

		rm -f {rescaled_fn} {sorted_fn}
		""")

		# Rescale Col5 scores to range 10-1000 to conform \
		# to gappedPeak.as format (score must be <1000)
		new_min=10
		new_max=1000
		scores_col=5
		sorted_fn = output.gappedPeak_psr2+"-sorted"
		rescaled_fn = output.gappedPeak_psr2+"-rescaled"

		shell("""
		sort -k 5gr,5gr {output.gappedPeak_psr2}|\
		awk 'BEGIN{{FS="\t";OFS="\t"}}{{if (NF != 0) print $0}}' > {sorted_fn}
		max=`head -n 1 {sorted_fn} | cut -f 5`
		min=`tail -n 1 {sorted_fn} | cut -f 5`
		cat {sorted_fn}|\
		awk -v min=$min -v max=$max 'BEGIN{{OFS="\t"}}{{n=$5;a=min;b=max;x=10;y=1000}}\
		{{$5=int(((n-a)*(y-x)/(b-a))+x) ; print $0}}' > {rescaled_fn}
		""")

		shell("""
		sort -k 14gr,14gr {rescaled_fn} |\
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ; \
               	print $0}}' > {output.gappedPeak_psr2}

		rm -f peaks/psr_{wildcards.sample}.01_peaks.xls peaks/psr_{wildcards.sample}.01_peaks.bed peaks/psr_{wildcards.sample}.01_summits.bed

		rm -f {rescaled_fn} {sorted_fn}
		""")

rule macs_callPeaks_pool:
	input:
		control = "bed_files/pooled_controls.bed.gz",
		ip = "bed_files/pooled_inputs.bed.gz",
		cc_scores = expand("xcor/{sample}.filt.nodup.sample.SE.tagAlign.cc.qc", sample=config["ips"])
	output:
		narrowPeak = "peaks/pooled_peaks.narrowPeak",
		narrowPeak_compressed = "peaks/pooled_peaks.narrowPeak.gz",
		narrowPeak_bb = "peaks/pooled_peaks.narrowPeak.bb",
		pvalue_signal = "peaks/signals/pooled.pvalue_signal.bw",
		fc_signal = "peaks/signals/pooled.fc_signal.bw",
		broadPeak = "peaks/pooled_peaks.broadPeak",
		broadPeak_compressed = "peaks/pooled_peaks.broadPeak.gz",
		broadPeak_bb = "peaks/pooled_peaks.broadPeak.bb",
		gappedPeak = "peaks/pooled_peaks.gappedPeak",
		gappedPeak_compressed = "peaks/pooled_peaks.gappedPeak.gz",
		gappedPeak_bb = "peaks/pooled_peaks.gappedPeak.bb"
	threads:1
	params:
		prefix="pooled"
	log: "logs/5_peakCalling"
	message: "Calling Peaks in pooled samples using MACS2"
	run:
		import os, sys, time,subprocess
		sum_len = 0
		n_files = 0
		for files in {input.cc_scores}:
			for file in files:
				n_files+=1
				with open(file,'r') as f:
					sum_len+=int(f.readlines()[0].split("\t")[2])
		fraglen=int(sum_len/n_files)

		#Calling narrowPeaks
		shell("""
		{config[macs2]} callpeak \
                  -t {input.ip} -c {input.control}\
                  -f BED -n peaks/pooled\
                  -g {config[macs_g]} -p 1e-2 --nomodel --shift 0 --extsize {fraglen} \
                  --keep-dup all -B --SPMR
		""")

		# Rescale Col5 scores to range 10-1000 to conform \
		# to narrowPeak.as format (score must be <1000)
		new_min=10
		new_max=1000
		scores_col=5
		sorted_fn = output.narrowPeak+"-sorted"
		rescaled_fn = output.narrowPeak+"-rescaled"

		shell("""
		sort -k 5gr,5gr {output.narrowPeak}|\
		awk 'BEGIN{{FS="\t";OFS="\t"}}{{if (NF != 0) print $0}}' > {sorted_fn}
		max=`head -n 1 {sorted_fn} | cut -f 5`
		min=`tail -n 1 {sorted_fn} | cut -f 5`
		cat {sorted_fn}|\
		awk -v min=$min -v max=$max 'BEGIN{{OFS="\t"}}{{n=$5;a=min;b=max;x=10;y=1000}}\
		{{$5=int(((n-a)*(y-x)/(b-a))+x) ; print $0}}' > {rescaled_fn}
		""")

		shell("""
		sort -k 8gr,8gr {rescaled_fn} |\
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ; \
               	print $0}}' | tee {output.narrowPeak} | gzip -c > {output.narrowPeak_compressed}

		rm -f peaks/pooled_peaks.xls peaks/pooled_peaks.bed peaks/pooled_summits.bed

		{config[macs2]} bdgcmp  \
                 -t peaks/pooled_treat_pileup.bdg -c peaks/pooled_control_lambda.bdg \
                 --outdir peaks/signals -o pooled_FE.bdg -m FE

		bedtools slop -i peaks/signals/pooled_FE.bdg -g {config[chrom]} -b 0 |\
                {config[path]}/bedClip stdin {config[chrom]} peaks/signals/pooled.fc.signal.bedgraph

		{config[path]}/bedGraphToBigWig peaks/signals/pooled.fc.signal.bedgraph \
                {config[chrom]} {output.fc_signal}

		rm -f peaks/signals/pooled.fc.signal.bedgraph

		ipReads=`gzip -dc {input.ip} |wc -l | cut -d " " -f1`
		controlReads=`gzip -dc {input.control} |wc -l | cut -d " " -f1`

            	sval=`echo 1 | awk -v ip=$ipReads -v control=$controlReads '{{if(ip<=control){{print ip/1000000}}else{{print control/1000000}}}}'`

		{config[macs2]} bdgcmp \
                -t peaks/pooled_treat_pileup.bdg \
                -c peaks/pooled_control_lambda.bdg \
                --outdir peaks/signals -o pooled_ppois.bdg  \
                -m ppois -S $sval

		bedtools slop -i peaks/signals/pooled_ppois.bdg -g {config[chrom]} -b 0 |\
                {config[path]}/bedClip stdin {config[chrom]} peaks/signals/pooled.pval.signal.bedgraph

		rm -rf peaks/singals/pooled_ppois.bdg

		{config[path]}/bedGraphToBigWig peaks/signals/pooled.pval.signal.bedgraph\
		{config[chrom]} {output.pvalue_signal}

		rm -f peaks/signals/pooled.pval.signal.bedgraph
		rm -f peaks/pooled_treat_pileup.bdg peaks/pooled_control_lambda.bdg

		sort -k1,1 -k2,2n -o peaks/tmp_{params.prefix}_narrow_bb {output.narrowPeak}

		bedtools slop -i peaks/tmp_{params.prefix}_narrow_bb -g {config[chrom]} -b 0 |\
                {config[path]}/bedClip stdin {config[chrom]} peaks/tmp_{params.prefix}_narrow_bb_clipped

		{config[path]}/bedToBigBed -type='bed6+4' -as={config[path]}/narrowPeak.as peaks/tmp_{params.prefix}_narrow_bb_clipped {config[chrom]} {output.narrowPeak_bb}
		rm -f peaks/tmp_{params.prefix}_narrow_bb peaks/tmp_{params.prefix}_narrow_bb_clipped

		rm -f {rescaled_fn} {sorted_fn}
		""")

		#Calling gappedPeaks
		shell("""
		{config[macs2]} callpeak \
                  -t {input.ip} -c {input.control}\
                  -f BED -n peaks/pooled\
                  -g {config[macs_g]} -p 1e-2 --broad --nomodel --shift 0 --extsize {fraglen} \
                  --keep-dup all """)

		# Rescale Col5 scores to range 10-1000 to conform \
		# to gappedPeak.as format (score must be <1000)
		new_min=10
		new_max=1000
		scores_col=5
		sorted_fn = output.broadPeak+"-sorted"
		rescaled_fn = output.broadPeak+"-rescaled"

		shell("""
		sort -k 5gr,5gr {output.broadPeak}|\
		awk 'BEGIN{{FS="\t";OFS="\t"}}{{if (NF != 0) print $0}}' > {sorted_fn}
		max=`head -n 1 {sorted_fn} | cut -f 5`
		min=`tail -n 1 {sorted_fn} | cut -f 5`
		cat {sorted_fn}|\
		awk -v min=$min -v max=$max 'BEGIN{{OFS="\t"}}{{n=$5;a=min;b=max;x=10;y=1000}}\
		{{$5=int(((n-a)*(y-x)/(b-a))+x) ; print $0}}' > {rescaled_fn}
		""")

		shell("""
		sort -k 8gr,8gr {rescaled_fn} |\
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ; \
               	print $0}}' | tee {output.broadPeak} | gzip -c > {output.broadPeak_compressed}

		rm -f peaks/pooled_peaks.xls peaks/pooled_peaks.bed peaks/pooled_summits.bed

		rm -f {rescaled_fn} {sorted_fn}
		""")

		# Rescale Col5 scores to range 10-1000 to conform \
		# to gappedPeak.as format (score must be <1000)
		new_min=10
		new_max=1000
		scores_col=5
		sorted_fn = output.gappedPeak+"-sorted"
		rescaled_fn = output.gappedPeak+"-rescaled"

		shell("""
		sort -k 5gr,5gr {output.gappedPeak}|\
		awk 'BEGIN{{FS="\t";OFS="\t"}}{{if (NF != 0) print $0}}' > {sorted_fn}
		max=`head -n 1 {sorted_fn} | cut -f 5`
		min=`tail -n 1 {sorted_fn} | cut -f 5`
		cat {sorted_fn}|\
		awk -v min=$min -v max=$max 'BEGIN{{OFS="\t"}}{{n=$5;a=min;b=max;x=10;y=1000}}\
		{{$5=int(((n-a)*(y-x)/(b-a))+x) ; print $0}}' > {rescaled_fn}
		""")

		shell("""
		sort -k 14gr,14gr {rescaled_fn} |\
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ; \
               	print $0}}' | tee {output.gappedPeak} | gzip -c > {output.gappedPeak_compressed}

		rm -f peaks/pooled_peaks.xls peaks/pooled_peaks.bed peaks/pooled_summits.bed

		rm -f {rescaled_fn} {sorted_fn}

		sort -k1,1 -k2,2n -o peaks/tmp_{params.prefix}_broad_bb {output.broadPeak}

		bedtools slop -i peaks/tmp_{params.prefix}_broad_bb -g {config[chrom]} -b 0 |\
                {config[path]}/bedClip stdin {config[chrom]} peaks/tmp_{params.prefix}_broad_bb_clipped

		{config[path]}/bedToBigBed -type='bed6+3' -as={config[path]}/broadPeak.as peaks/tmp_{params.prefix}_broad_bb_clipped {config[chrom]} {output.broadPeak_bb}

		rm -f peaks/tmp_{params.prefix}_broad_bb  peaks/tmp_{params.prefix}_broad_bb_clipped

		sort -k1,1 -k2,2n -o peaks/tmp_{params.prefix}_gapped_bb {output.gappedPeak}

		bedtools slop -i peaks/tmp_{params.prefix}_gapped_bb -g {config[chrom]} -b 0 |\
                {config[path]}/bedClip stdin {config[chrom]} peaks/tmp_{params.prefix}_gapped_bb_clipped

		{config[path]}/bedToBigBed -type='bed12+3' -as={config[path]}/gappedPeak.as peaks/tmp_{params.prefix}_gapped_bb_clipped {config[chrom]} {output.gappedPeak_bb}

		rm -f peaks/tmp_{params.prefix}_gapped_bb peaks/tmp_{params.prefix}_gapped_bb_clipped

		""")


rule macs_callPeaks_pool_narrow:
	input:
		control = "bed_files/pooled_controls.bed.gz",
		ip = "bed_files/{sample}.bed.gz",
		ip_psr1 = "bed_files/psr_{sample}.00.bed.gz",
		ip_psr2 = "bed_files/psr_{sample}.01.bed.gz",
		cc_scores = "xcor/{sample}.filt.nodup.sample.SE.tagAlign.cc.qc"
	output:
		narrowPeak = temp("peaks/{sample}_peaks.narrowPeak"),
		narrowPeak_compressed = "peaks/{sample}_peaks.narrowPeak.gz",
		narrowPeak_bb = "peaks/{sample}_peaks.narrowPeak.bb",
		narrowPeak_psr1 = "peaks/psr_{sample}.00_peaks.narrowPeak",
		narrowPeak_psr2 = "peaks/psr_{sample}.01_peaks.narrowPeak",
		treat = temp("peaks/{sample}_treat_pileup.bdg"),
		control_lambda = temp("peaks/{sample}_control_lambda.bdg")
	threads:1
	params:
		prefix="{sample}"
	log: "logs/5_peakCalling"
	message: "Calling Peaks using MACS2"
	shell:
		"""
		fraglen=`cat {input.cc_scores} | cut -f3`

		{config[macs2]} callpeak \
                  -t {input.ip} -c {input.control}\
                  -f BED -n peaks/{wildcards.sample}\
                  -g {config[macs_g]} -p 1e-2 --nomodel --shift 0 --extsize $fraglen \
                  --keep-dup all -B --SPMR

		sort -k 8gr,8gr {output.narrowPeak} |\
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ;i print $0}}'| \
		gzip -nc > {output.narrowPeak_compressed}

		rm -f peaks/{wildcards.sample}_peaks.xls peaks/{wildcards.sample}_summits.bed

		"""


rule macs_callPeaks_pool_broad:
	input:
		control = "bed_files/pooled_controls.bed.gz",
		ip = "bed_files/{sample}.bed.gz",
		ip_psr1 = "bed_files/psr_{sample}.00.bed.gz",
		ip_psr2 = "bed_files/psr_{sample}.01.bed.gz",
		cc_scores = "xcor/{sample}.filt.nodup.sample.SE.tagAlign.cc.qc"
	output:
		broadPeak = temp("peaks/{sample}_peaks.broadPeak"),
		broadPeak_compressed = "peaks/{sample}_peaks.broadPeak.gz",
		broadPeak_bb = "peaks/{sample}_peaks.broadPeak.bb",
		broadPeak_psr1 = "peaks/psr_{sample}.00_peaks.broadPeak",
		broadPeak_psr2 = "peaks/psr_{sample}.01_peaks.broadPeak",
		gappedPeak = temp("peaks/{sample}_peaks.gappedPeak"),
		gappedPeak_compressed = "peaks/{sample}_peaks.gappedPeak.gz",
		gappedPeak_bb = "peaks/{sample}_peaks.gappedPeak.bb",
		gappedPeak_psr1 = "peaks/psr_{sample}.00_peaks.gappedPeak",
		gappedPeak_psr2 = "peaks/psr_{sample}.01_peaks.gappedPeak"
	threads:1
	params:
		prefix="{sample}"
	log: "logs/5_peakCalling"
	message: "Calling Peaks using MACS2"
	shell:
		"""
		fraglen=`cat {input.cc_scores} | cut -f3`

		{config[macs2]} callpeak \
                  -t {input.ip} -c {input.control}\
                  -f BED -n peaks/{wildcards.sample}\
                  -g {config[macs_g]} -p 1e-2 --broad --nomodel --shift 0 --extsize $fraglen \
                  --keep-dup all

		sort -k 8gr,8gr {output.broadPeak} | \
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ;i print $0}}'| \
		gzip -nc > {output.broadPeak_compressed}

		sort -k 14gr,14gr {output.broadPeak} | \
		awk 'BEGIN{{OFS="\t"}}{{$4="Peak_"NR ;i print $0}}'| \
		gzip -nc > {output.gappedPeak_compressed}


		rm -f peaks/{wildcards.sample}_peaks.xls peaks/{wildcards.sample}_summits.bed

		"""


rule macs_pool_signal_tracks:
	input:
		control = "bed_files/pooled_controls.bed.gz",
		ip = "bed_files/{sample}.bed.gz",
		treat = "peaks/{sample}_treat_pileup.bdg",
		control_lambda = "peaks/{sample}_control_lambda.bdg"
	output:
		pvalue_signal = "peaks/signals/{sample}.pvalue_signal.bw",
		fe_bdg = temp("peaks/signals/{sample}_FE.bdg"),
		fc_signal_bdg = temp("peaks/signals/{sample}.fc.signal.bedgraph"),
		fc_signal = "peaks/signals/{sample}.fc_signal.bw",
		ppois = temp("peaks/signals/{sample}_ppois.bdg"),
		pval_bdg = temp("peaks/signals/{sample}.pval.signal.bedgraph"),
		pval = "peaks/signals/{sample}.pval.signal.bw"
	threads:1
	params:
		prefix="{sample}"
	log: "logs/5_peakCalling"
	message: "Calling Peaks using MACS2"
	shell:
		"""
		{config[macs2]} bdgcmp  \
                 -t {input.treat} -c {input.control_lambda} \
                 --outdir peaks/signals -o {output.fe_bdg} -m FE

		bedtools slop -i {output.fe_bdg} -g {config[chrom]} -b 0 |\
		awk '{{ if($3!=-1) print $0}}' | \
                {config[path]}/bedClip stdin {config[chrom]} {output.fc_signal_bdg}


		{config[path]}/bedGraphToBigWig {output.fc_signal_bdg} {config[chrom]} {output.fc_signal}


		chipReads=$(zcat {input.ip} | wc -l | awk '{{printf "%f", $1/1000000}}');
		controlReads=$(zcat {control.ip} | wc -l | awk '{{printf "%f", $1/1000000}}');

		sval=$(echo "${chipReads} ${controlReads}" | awk '$1>$2{{printf "%f",$2}} $1<=$2{{printf "%f",$1}}');

		macs2 bdgcmp -t {input.treat} -c {input.control_lambda} --outdir peaks/signals -o {output.ppois} -m ppois -S ${sval}

		slopBed -i {output.ppois} -g {config[chrom]} -b 0 | \
		awk '{{if ($3 != -1) print $0}}' |  \
		bedClip stdin {config[chrom]} {output.pval_bdg}

		bedGraphToBigWig {output.pval_bdg} {config[chrom]} {output.pval}

		"""
